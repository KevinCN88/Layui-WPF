<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Lay="clr-namespace:LayUI.Wpf.Controls">
    <Style x:Key="LayMenuItemStyle" TargetType="Lay:LayMenuItem">
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Height" Value="1" />
                <Setter Property="Margin" Value="0,4,0,4" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Border BorderThickness="1">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{DynamicResource LightBlackEffect}" />
                                </Border.BorderBrush>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  TopLevelHeader  -->
            <ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="{x:Type Lay:LayMenuItem}">
                <Border
                    x:Name="Border"
                    Background="Transparent"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid>
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Header"
                            RecognizesAccessKey="True" />
                        <Popup
                            x:Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsSubmenuOpen}"
                            Placement="Bottom"
                            PlacementTarget="{Binding ElementName=Border}"
                            PopupAnimation="Fade">
                            <Grid
                                x:Name="SubmenuBorder"
                                Background="Transparent"
                                Effect="{DynamicResource LayShadow}"
                                SnapsToDevicePixels="True">
                                <Border Background="White" Opacity="0.01" />
                                <Border Margin="5" Background="{TemplateBinding Background}" />
                                <ScrollViewer
                                    Margin="5"
                                    CanContentScroll="True"
                                    Style="{DynamicResource LayScrollViewerStyle}">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                        <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="true" />
                    <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True" />
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground">
                            <Setter.Value>
                                <SolidColorBrush Color="{DynamicResource LightBlackEffect}" />
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--  TopLevelItem  -->
            <ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="{x:Type Lay:LayMenuItem}">
                <Border x:Name="Border">
                    <Grid>
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Header"
                            RecognizesAccessKey="True" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsHighlighted" Value="true" />
                    <Trigger Property="IsEnabled" Value="False" />
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!--  SubmenuItem  -->
            <ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="{x:Type Lay:LayMenuItem}">
                <Border
                    x:Name="Border"
                    Background="Transparent"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                            <ColumnDefinition Width="13" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            x:Name="Icon"
                            Margin="6,0"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Icon" />
                        <Border
                            x:Name="Check"
                            Width="13"
                            Height="13"
                            Margin="6,0"
                            IsHitTestVisible="True"
                            Visibility="Hidden">
                            <Path
                                x:Name="CheckMark"
                                Width="7"
                                Height="7"
                                Data="M 0 0 L 7 7 M 0 7 L 7 0"
                                IsHitTestVisible="True"
                                SnapsToDevicePixels="False"
                                StrokeThickness="2"
                                Visibility="Hidden">
                                <Path.Stroke>
                                    <SolidColorBrush Color="{DynamicResource LightBlackEffect}" />
                                </Path.Stroke>
                            </Path>
                        </Border>
                        <ContentPresenter
                            x:Name="HeaderHost"
                            Grid.Column="1"
                            Margin="6,3"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Header"
                            RecognizesAccessKey="True" />
                        <TextBlock
                            x:Name="InputGestureText"
                            Grid.Column="2"
                            Margin="5,2,0,2"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            IsHitTestVisible="True"
                            Text="{TemplateBinding InputGestureText}" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="Border" Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Opacity="0.1" Color="{DynamicResource LightBlackEffect}" />
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsCheckable" Value="true">
                        <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="true" />
                    <Trigger Property="IsEnabled" Value="false" />
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="{x:Type Lay:LayMenuItem}">
                <Border
                    x:Name="Border"
                    Background="Transparent"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                            <ColumnDefinition Width="25" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="Check"
                            Width="13"
                            Height="13"
                            Margin="6,0"
                            IsHitTestVisible="True"
                            Visibility="Hidden" />
                        <ContentPresenter
                            x:Name="Icon"
                            Margin="6,0"
                            VerticalAlignment="Center"
                            ContentSource="Icon" />
                        <ContentPresenter
                            x:Name="HeaderHost"
                            Grid.Column="1"
                            Margin="6,3"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            ContentSource="Header"
                            RecognizesAccessKey="True" />
                        <TextBlock
                            x:Name="InputGestureText"
                            Grid.Column="2"
                            Margin="5,2,2,2"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            IsHitTestVisible="True"
                            Text="{TemplateBinding InputGestureText}" />
                        <Path
                            Grid.Column="3"
                            Width="13"
                            Height="7"
                            Data="M966.4 323.2c-9.6-9.6-25.6-9.6-35.2 0l-416 416-425.6-416c-9.6-9.6-25.6-9.6-35.2 0-9.6 9.6-9.6 25.6 0 35.2l441.6 432c9.6 9.6 25.6 9.6 35.2 0l435.2-432C976 345.6 976 332.8 966.4 323.2z"
                            IsHitTestVisible="True"
                            RenderTransformOrigin="0.5,0.5"
                            Stretch="Fill">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform x:Name="RotateTransform" Angle="-90" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Path.RenderTransform>
                            <Path.Fill>
                                <SolidColorBrush Color="{DynamicResource LightBlackEffect}" />
                            </Path.Fill>
                        </Path>
                        <Popup
                            x:Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsSubmenuOpen}"
                            Placement="Right"
                            PlacementTarget="{Binding ElementName=Border}"
                            PopupAnimation="Fade">
                            <Grid
                                x:Name="SubmenuBorder"
                                Background="Transparent"
                                Effect="{DynamicResource LayShadow}"
                                SnapsToDevicePixels="True">
                                <Border Background="White" Opacity="0.01" />
                                <Border Margin="5" Background="{TemplateBinding Background}" />
                                <ScrollViewer
                                    Margin="5"
                                    CanContentScroll="True"
                                    Style="{DynamicResource LayScrollViewerStyle}">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Icon" Value="{x:Null}">
                        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="Border" Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Opacity="0.1" Color="{DynamicResource LightBlackEffect}" />
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="true">
                        <Setter TargetName="Border" Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Opacity="0.1" Color="{DynamicResource LightBlackEffect}" />
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false" />
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Height" Value="40" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{DynamicResource TopLevelHeaderTemplateKey}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{DynamicResource TopLevelItemTemplateKey}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource SubmenuHeaderTemplateKey}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{DynamicResource SubmenuItemTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource LayMenuItemStyle}" TargetType="Lay:LayMenuItem" />
</ResourceDictionary>